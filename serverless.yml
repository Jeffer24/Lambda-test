app: web-proyecto-serverless
org: jeffer24
#console: true

service: web-proyecto-serverless

frameworkVersion: '3'

#plugins:
  #- serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: "us-east-1"
  stage: ${opt:stage}

  apiGateway:
    request:
      schemas:
        perfil-input-model:
          name: PerfilInputModel
          schema: ${file(infraestructure/handlers/schemas/perfiles-schema.json)}
          description: "Validacion de los datos del perfil"


functions:
  getPerfiles:
    handler: infraestructure/handlers/perfiles-handler.getPerfiles
    events:
      - http:
          path: perfiles
          method: get
          cors: true
          authorizer: aws_iam
  createPerfil:
    handler: infraestructure/handlers/perfiles-handler.createPerfil
    events:
      - http:
          path: perfiles
          method: post
          request:
            schemas:
              application/json: ${file(infraestructure/handlers/schemas/perfiles-schema.json)}

  updatePerfil:
    handler: infraestructure/handlers/perfiles-handler.updatePerfil
    events:
      - http:
          path: perfiles/{id}
          method: put
          request:
            schemas:
              application/json: ${file(infraestructure/handlers/schemas/perfiles-schema.json)}
  deletePerfil:
    handler: infraestructure/handlers/perfiles-handler.deletePerfil
    events:
      - http:
          path: perfiles/{id}
          method: delete  
  getDetailPerfil:
    handler: infraestructure/handlers/perfiles-handler.getDetailPerfil
    events:
      - http:
          path: perfiles/{id}
          method: get

resources:
  Resources:
    # Cognito - User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: cognito_sls_backend_user_pool
    # Cognito - Client
    CognitoUserPoolClient:    
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: cognito_sls_backend_client
        UserPoolId:
          Ref: CognitoUserPool
    # Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: cognito_sls_backend_identity_pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: 
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
      # Cognito - Roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: 
          Ref: CognitoIdentityPool
        Roles: 
          authenticated: 
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated: 
            Fn::GetAtt: [CognitoUnauthRole, Arn]     
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2023-02-07"
          Statement:
            - Effect: "Allow"
              Principal: 
                Federated: "cognito-identity.amazonaws.com"       
              Action: 
                - "sts:AssumeRoleWithWebIdentity"
              Condition:       
                StringEquals: 
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2023-02-07"
              Statement:
                - Effect: "Allow"
                  Action: 
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resources: "*"
                - Effect: "Allow"
                  Action: 
                    - "execute-api: Invoke"
                  Resources: "*"    

